package maths.geom3D;
import commons.*;
import maths.Maths;
import maths.equations.*;
import java.awt.*;

public class Line3D extends Core3D implements Framed3D
{
	protected double ax,by,cz,dk;
	protected double inclin[] = new double[3]; //x, y, z
	protected double slope[] =new double[3]; // x, y, z
	protected double[] inter=new double[3]; //x, y, z
	public boolean[] frame=new boolean[] {true,true,true};
	private VariableEquation[] veqs=new VariableEquation[3];
	protected Color myC=Color.black;
	public final Point3D exPt1,exPt2;
	// 0,0,0 with 3,3,3
	public Line3D() 
	{
		this(Point3D.O,new Point3D(1,0,0));
	}
	public Line3D(Point3D p1,Point3D p2)
	{
		exPt1=p1; exPt2=p2;
		calcVits(p1,p2);
	}
	public Line3D(Direction dir)
	{
		exPt1=Point3D.O;
		exPt2=new Point3D(Math.acos(dir.getX()),Math.acos(dir.getY()),Math.acos(dir.getZ()));
		calcVits(exPt1,exPt2);
	}
	private void calcVits(Point3D p1,Point3D p2)
	{
		inclin[0]=Math.atan((p2.y-p1.y)/(p2.x-p1.x));
		inclin[1]=Math.atan((p2.x-p1.x)/(p2.z-p1.z));
		inclin[2]=Math.atan((p2.z-p1.z)/(p2.y-p1.y));
		slope[0]=Maths.round((p2.y-p1.y)/(p2.x-p1.x),4);
		slope[1]=Maths.round((p2.x-p1.x)/(p2.z-p1.z),4);
		slope[2]=Maths.round((p2.z-p1.z)/(p2.y-p1.y),4);
		
		/*for(int i=0;i<slope.length;i++)
			slope[i]=Maths.round(Math.tan(inclin[0]),4);*/
		//X.sopln(((p2.y-p1.y)/(p2.x-p1.x))+","+((p2.x-p1.x)/(p2.z-p1.z))+","+((p2.z-p1.z)/(p2.y-p1.y)));
		
		inter[1]=Maths.round((p2.y-p2.x*slope[0]),4);
		inter[2]=Maths.round((p2.z-p2.y*slope[1]),4);
		inter[0]=Maths.round((p2.x-p2.z*slope[2]),4);
		
		veqs[0]=new VariableEquation("y = "+slope[0]+"x +"+(Maths.perfect(inter[1])).trim());
		veqs[1]=new VariableEquation("z = "+slope[1]+"y +"+(Maths.perfect(inter[2])).trim());
		veqs[2]=new VariableEquation("x = "+slope[2]+"z +"+(Maths.perfect(inter[0])).trim());
	}
	
	public boolean pointOnLine(Point3D p)
	{
		/*
			y=mx + yi
			z=my + zi
			x=mz + xi
		*/
		return (sat1(p) && sat2(p) && sat3(p));
	}
	public boolean sat1(Point3D p)
	{
		return (p.y==Maths.round(slope[0]*p.x+inter[1],3));
	}
	public boolean sat2(Point3D p)
	{
		return (p.z==Maths.round(slope[1]*p.y+inter[2],3));
	}
	public boolean sat3(Point3D p)
	{
		return (p.x==Maths.round(slope[2]*p.z+inter[0],3));
	}
	public void printLineEqns()
	{
		for(int i=0;i<veqs.length;i++)
			veqs[i].printEqn();
	}
	private void calcFrame()
	{
		frame=exPt1.getPlane(exPt2);
		myC=getColorByFrame(frame);
	}
	public boolean[] getFrame()
	{
		calcFrame();
		return frame;
	}
	/*
		Left to LineSegment3D
			- Perp. Bisector (Line3D[])
			- Length (double)
			- Mid-Point (Point3D)
			- Plotting
	*/
	public Point3D cross(Line3D l2) //Point of Intersection
	{
		return null;
	}
}
